- My inital goal is to try and automate the process in creating a draft link using draftlol.dawe.gg
- To expand, it should be able to take a previous draft link and scrape what champions were picked and banned by each side, then create the link for a new draft with all of those champions being banned using the advanced options setting
- The final step of this would be to create a discord bot that can store the information from consecutive links to allow 3-5 games to be played in succession and successfully store and create drafts each time until the session is over. There will be a simple reset command to clear a list of banned champion names and there could be a previous drafts command that stores the links given to look at the drafts and a banned champions command that shows what champions are in the list 
- Needed to figure out what to use to scrape a website in python, saw BeautifulSoup, Scrapy and Selenium were the common packages used for it
- Decided to use Selenium as it seems that it would be necessary to click the advanced options button to get to the settings I want to in the project and would require clicking images after
- After creating venv, pip install selenium, pip install webdriver_manager
- Webdriver_manager will be a backup if chromedriver fails but its just a backup and should not be needed
- After opening advanced options, due to the images having to be clicked on versus a button, switched from .click() to execute_script to click on the image
- Originally used xpath for image but this could easily cause problems as champions could be added or switched around in position so decided to use search function on website instead to ban champions one by one
- This also meant changing the xpath used for the advanced options button which can easily be found by class
- Got draft creator to work using the search bar, might be better to not use search bar in future but for now it works...
- Clicks the create draft button after banning the champions via searching one by one, then gets the blue and red drafts created from this button and slices the string created from blueDraft to get the spectate link
- Using the link in test drafts in order to create the draft puller
- The picks are seperated by color and the names of each champion are under the 'p' tag so I used that to pull each pick
- The bans are also separated by color and I can pull the names of each champion via the alt property and img tag
- After completing this stage, I realized that the next step would be using the results from draft puller to create the list for draft creator, I was thinking the best way to do this would be a txt file due to the fact there will be multiple games which means multiple pulls and these will need to be stored somewhere. The other option was creating a main.py file and having a list that can be used for both files which might be the better choice after creating the discord bot
- Originally I was going to format the txt file to be easy to read via subtitles but I rather just make it easy to use for draft creator (so no subtitles) and when the bot is created formatting can be done
- Edited draft creator.py to use bannedchampions.txt to create the ban list (if banned champions.txt doesn't exist it will create a draft with no bans but this shouldn't really be the case...)
- Forgot I had Python 2.7.18 installed for an old project... needed to recreate venv with Python 3.11.0
- Find by "" was removed in newer selenium version? fix code for this
- Tried to run pip install discord in venv but was running into errors, thought it was because I did not have C++ tools installed on this pc (I should have just done this project on my laptop...)
- Followed a Youtube tutorial for inital discord bot setup (https://www.youtube.com/watch?v=1yLfjMtsV9s); will be hiding my token so these files will not be fully functional... can put a token in the bot.py file and it should work
- Can also just add my version of the bot using bot invite link
- Renamed draft creator to draft_creator so it can be imported, same with draft puller -> draft_puller, also edited these files to be functions so responses.py can call it
- Learned if headless is set to true, the page can be scraped without it being opened on my desktop
- With the load draft command in responses.py I was expecting it to crash if random text was inserted in the link but it appears if the link is valid it will work regardless of messages after it? Strange but I would assume browser.get() in draft_puller.py can get the url from the string?
- Draft_creator doesn't seem to work with headless selenium, probably due to using the search bar. This could probably be resolved if the method was changed to just use the images instead of the search bar.
- Setting the window size fixed this problem
- Got rid of !test, added !bans
- Got rid of !roll, added !side
- Changed !create draft to return normal text so the links are clickable
- After some testing, saw Ornn and Vi don't work as intended due to search returning multiple champions, added if statements in ban_champion to compensate
- Added !drafts to see the previous drafts, draftlist.txt is created when drafts are loaded and !drafts will display the info in draftlist.txt
- Friend asked about error checking when pulling drafts, my initial thought process was checking the ban list before adding a ban was too costly. It could be done by using a set and sorting the champions by their roles like done on the website. However, this feature just doesn't seem worth the investment due to this error not being expected when the bot is used to create drafts from consecutive games.
- Decided to add "remove champion" if "add champion" is there so we can use add and remove before actually creating drafts
